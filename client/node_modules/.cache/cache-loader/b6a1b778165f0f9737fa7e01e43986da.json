{"remainingRequest":"/Users/zhangqiong/betalpha/node/client/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/zhangqiong/betalpha/node/client/node_modules/babel-loader/lib/index.js??ref--4-3!/Users/zhangqiong/betalpha/node/client/shared/entities/request.js","dependencies":[{"path":"/Users/zhangqiong/betalpha/node/client/shared/entities/request.js","mtime":1563330949000},{"path":"/Users/zhangqiong/betalpha/node/client/.babelrc","mtime":1563172830000},{"path":"/Users/zhangqiong/betalpha/node/client/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/Users/zhangqiong/betalpha/node/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangqiong/betalpha/node/client/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangqiong/betalpha/node/client/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9pbmNsdWRlcyBmcm9tICJsb2Rhc2gvZnAvaW5jbHVkZXMiOwppbXBvcnQgX2lzQXJyYXkgZnJvbSAibG9kYXNoL2ZwL2lzQXJyYXkiOwppbXBvcnQgX2ZvckVhY2ggZnJvbSAibG9kYXNoL2ZwL2ZvckVhY2giOwppbXBvcnQgX2lzTnVsbCBmcm9tICJsb2Rhc2gvZnAvaXNOdWxsIjsKaW1wb3J0IF9tYXBWYWx1ZXMgZnJvbSAibG9kYXNoL2ZwL21hcFZhbHVlcyI7CmltcG9ydCBfc29tZSBmcm9tICJsb2Rhc2gvZnAvc29tZSI7CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyBrZXlzLnB1c2guYXBwbHkoa2V5cywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTsgfSBpZiAoZW51bWVyYWJsZU9ubHkpIGtleXMgPSBrZXlzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsgcmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKaW1wb3J0IHFzIGZyb20gJ3FzJzsKCnZhciBmb3JFYWNoID0gX2ZvckVhY2guY29udmVydCh7CiAgY2FwOiBmYWxzZQp9KTsKCnZhciBBUElfQkFTRV9VUkwgPSBnbG9iYWwuQ09ORklHLkFQSV9CQVNFX1VSTDsKdmFyIF9nbG9iYWwgPSBnbG9iYWwsCiAgICBGaWxlID0gX2dsb2JhbC5GaWxlOwp2YXIgYXBpQmFzZVVybCA9IEFQSV9CQVNFX1VSTDsKCnZhciBjb21tb25GZXRjaCA9IGZ1bmN0aW9uIGNvbW1vbkZldGNoKG1ldGhvZCwgdXJsLCBkYXRhLCBvcHRpb25zKSB7CiAgdmFyIHByb2Nlc3NlZERhdGEgPSBkYXRhOwoKICBpZiAoZGF0YSAmJiAhX2lzQXJyYXkocHJvY2Vzc2VkRGF0YSkpIHsKICAgIHByb2Nlc3NlZERhdGEgPSBfbWFwVmFsdWVzKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICByZXR1cm4gX2lzTnVsbCh2YWx1ZSkgPyAnbnVsbCcgOiB2YWx1ZTsKICAgIH0pKGRhdGEpOwogIH0KCiAgdmFyIGZpbmFsRGF0YTsKICB2YXIgaGVhZGVycyA9IHsKICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKICB9OwoKICBpZiAoX3NvbWUoZnVuY3Rpb24gKGl0ZW0pIHsKICAgIHJldHVybiBpdGVtIGluc3RhbmNlb2YgRmlsZTsKICB9LCBwcm9jZXNzZWREYXRhKSkgewogICAgZmluYWxEYXRhID0gbmV3IEZvcm1EYXRhKCk7CiAgICBmb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7CiAgICAgIGZpbmFsRGF0YS5hcHBlbmQoa2V5LCB2YWx1ZSk7CiAgICB9KShwcm9jZXNzZWREYXRhKTsKICAgIGhlYWRlcnMgPSB7fTsKICB9IGVsc2UgaWYgKHByb2Nlc3NlZERhdGEpIHsKICAgIGZpbmFsRGF0YSA9IEpTT04uc3RyaW5naWZ5KHByb2Nlc3NlZERhdGEpOwogIH0KCiAgY29uc29sZS5sb2coZmluYWxEYXRhKTsKICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucywgewogICAgdXJsOiAiIi5jb25jYXQoYXBpQmFzZVVybCkuY29uY2F0KHVybCksCiAgICBjcmVkZW50aWFsczogX2luY2x1ZGVzKCdsb2NhbGhvc3QnKShhcGlCYXNlVXJsKSA/ICdvbWl0JyA6ICdpbmNsdWRlJywKICAgIGlzQXBpOiB0cnVlLAogICAgbWV0aG9kOiBtZXRob2QsCiAgICBoZWFkZXJzOiBoZWFkZXJzLAogICAgYm9keTogZmluYWxEYXRhCiAgfSk7Cn07CgpleHBvcnQgdmFyIHJlYWQgPSBmdW5jdGlvbiByZWFkKHVybCwgcXVlcnksIG9wdGlvbnMpIHsKICByZXR1cm4gY29tbW9uRmV0Y2goJ0dFVCcsIHF1ZXJ5ID8gIiIuY29uY2F0KHVybCwgIj8iKS5jb25jYXQocXMuc3RyaW5naWZ5KHF1ZXJ5LCB7CiAgICBhcnJheUZvcm1hdDogJ2JyYWNrZXRzJwogIH0pKSA6IHVybCwgbnVsbCwgb3B0aW9ucyk7Cn07CmV4cG9ydCB2YXIgcG9zdCA9IGZ1bmN0aW9uIHBvc3QodXJsLCBkYXRhLCBvcHRpb25zKSB7CiAgcmV0dXJuIGNvbW1vbkZldGNoKCdQT1NUJywgdXJsLCBkYXRhLCBvcHRpb25zKTsKfTsKZXhwb3J0IHZhciBwdXQgPSBmdW5jdGlvbiBwdXQodXJsLCBkYXRhLCBvcHRpb25zKSB7CiAgcmV0dXJuIGNvbW1vbkZldGNoKCdQVVQnLCB1cmwsIGRhdGEsIG9wdGlvbnMpOwp9OwpleHBvcnQgdmFyIHBhdGNoID0gZnVuY3Rpb24gcGF0Y2godXJsLCBkYXRhLCBvcHRpb25zKSB7CiAgcmV0dXJuIGNvbW1vbkZldGNoKCdQQVRDSCcsIHVybCwgZGF0YSwgb3B0aW9ucyk7Cn07CmV4cG9ydCB2YXIgZGVsID0gZnVuY3Rpb24gZGVsKHVybCwgZGF0YSwgb3B0aW9ucykgewogIHJldHVybiBjb21tb25GZXRjaCgnREVMRVRFJywgZGF0YSA/ICIiLmNvbmNhdCh1cmwsICI/IikuY29uY2F0KHFzLnN0cmluZ2lmeShkYXRhLCB7CiAgICBhcnJheUZvcm1hdDogJ2JyYWNrZXRzJwogIH0pKSA6IHVybCwgbnVsbCwgb3B0aW9ucyk7Cn07"},{"version":3,"sources":["/Users/zhangqiong/betalpha/node/client/shared/entities/request.js"],"names":["qs","forEach","convert","cap","API_BASE_URL","global","CONFIG","File","apiBaseUrl","commonFetch","method","url","data","options","processedData","value","finalData","headers","item","FormData","key","append","JSON","stringify","console","log","credentials","isApi","body","read","query","arrayFormat","post","put","patch","del"],"mappings":"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","sourcesContent":["import qs from 'qs';\nimport {\n  some,\n  mapValues,\n  isNull,\n  forEach as orginalForEach,\n  isArray,\n  prop,\n  includes,\n} from 'lodash/fp';\n\nconst forEach = orginalForEach.convert({ cap: false });\n\nconst { API_BASE_URL } = global.CONFIG;\nconst { File } = global;\n\nconst apiBaseUrl = API_BASE_URL;\n\n\nconst commonFetch = (method, url, data, options) => {\n  let processedData = data;\n  if (data && !isArray(processedData)) {\n    processedData = mapValues(value => (isNull(value) ? 'null' : value))(data);\n  }\n  let finalData;\n  let headers = {\n    'content-type': 'application/json',\n  };\n  if (some(item => item instanceof File, processedData)) {\n    finalData = new FormData();\n    forEach((value, key) => {\n      finalData.append(key, value);\n    })(processedData);\n    headers = {};\n  } else if (processedData) {\n    finalData = JSON.stringify(processedData);\n  }\n  console.log(finalData);\n  return {\n    ...options,\n    url: `${apiBaseUrl}${url}`,\n    credentials: includes('localhost')(apiBaseUrl) ? 'omit' : 'include',\n    isApi: true,\n    method,\n    headers,\n    body: finalData,\n  };\n};\n\nexport const read = (url, query, options) =>\n  commonFetch(\n    'GET',\n    query ? `${url}?${qs.stringify(query, { arrayFormat: 'brackets' })}` : url,\n    null,\n    options,\n  );\n\nexport const post = (url, data, options) =>\n  commonFetch('POST', url, data, options);\n\nexport const put = (url, data, options) =>\n  commonFetch('PUT', url, data, options);\n\nexport const patch = (url, data, options) =>\n  commonFetch('PATCH', url, data, options);\n\nexport const del = (url, data, options) =>\n  commonFetch(\n    'DELETE',\n    data ? `${url}?${qs.stringify(data, { arrayFormat: 'brackets' })}` : url,\n    null,\n    options,\n  );\n\n"]}]}